// Script debug ƒëƒÉng nh·∫≠p admin
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8080/api';

async function debugLogin() {
  console.log(' Debug ƒëƒÉng nh·∫≠p admin...');
  console.log('API Base URL:', API_BASE_URL);
  
  const adminCredentials = {
    email: 'admin@catshop.com',
    password: 'admin123'
  };

  try {
    // Test 1: Ki·ªÉm tra k·∫øt n·ªëi backend
    console.log('\n1. Ki·ªÉm tra k·∫øt n·ªëi backend...');
    try {
      const healthResponse = await axios.get(`${API_BASE_URL}/products`, {
        timeout: 5000
      });
      console.log(' Backend ƒëang ch·∫°y');
      console.log('Status:', healthResponse.status);
    } catch (error) {
      console.log(' Backend kh√¥ng ch·∫°y ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi');
      console.log('Error:', error.message);
      if (error.code === 'ECONNREFUSED') {
        console.log(' H√£y ƒë·∫£m b·∫£o Spring Boot ƒëang ch·∫°y tr√™n port 8080');
      }
      return;
    }

    // Test 2: Ki·ªÉm tra endpoint ƒëƒÉng nh·∫≠p
    console.log('\n2. Ki·ªÉm tra endpoint ƒëƒÉng nh·∫≠p...');
    try {
      const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, adminCredentials, {
        timeout: 5000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log(' Endpoint ƒëƒÉng nh·∫≠p ho·∫°t ƒë·ªông');
      console.log('Status:', loginResponse.status);
      console.log('Response:', loginResponse.data);
      
    } catch (error) {
      console.log(' L·ªói ƒëƒÉng nh·∫≠p');
      console.log('Error:', error.message);
      
      if (error.response) {
        console.log('Status:', error.response.status);
        console.log('Status Text:', error.response.statusText);
        console.log('Response Data:', error.response.data);
        
        if (error.response.status === 404) {
          console.log('üí° Endpoint /auth/login kh√¥ng t·ªìn t·∫°i');
          console.log('   Ki·ªÉm tra controller mapping trong Spring Boot');
        } else if (error.response.status === 401) {
          console.log('üí° Sai th√¥ng tin ƒëƒÉng nh·∫≠p ho·∫∑c t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');
          console.log('   Ki·ªÉm tra database c√≥ t√†i kho·∫£n admin kh√¥ng');
        } else if (error.response.status === 500) {
          console.log('üí° L·ªói server - ki·ªÉm tra logs Spring Boot');
        }
      }
    }

    // Test 3: Ki·ªÉm tra database c√≥ t√†i kho·∫£n admin kh√¥ng
    console.log('\n3. Ki·ªÉm tra t√†i kho·∫£n admin trong database...');
    try {
      // Th·ª≠ c√°c endpoint kh√°c ƒë·ªÉ ki·ªÉm tra database
      const usersResponse = await axios.get(`${API_BASE_URL}/users`, {
        timeout: 5000
      });
      
      console.log('‚úÖ Endpoint users ho·∫°t ƒë·ªông');
      console.log('Users count:', usersResponse.data?.length || 'Unknown');
      
      // T√¨m admin user
      const adminUser = usersResponse.data?.find(user => 
        user.email === 'admin@catshop.com' || user.username === 'admin'
      );
      
      if (adminUser) {
        console.log('‚úÖ T√¨m th·∫•y t√†i kho·∫£n admin trong database');
        console.log('Admin user:', {
          id: adminUser.user_id || adminUser.id,
          username: adminUser.username,
          email: adminUser.email,
          role: adminUser.role_id || adminUser.role
        });
      } else {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin trong database');
        console.log('üí° H√£y ch·∫°y: npm run create-admin');
      }
      
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra database');
      console.log('Error:', error.message);
    }

    // Test 4: Ki·ªÉm tra CORS
    console.log('\n4. Ki·ªÉm tra CORS...');
    try {
      const corsResponse = await axios.options(`${API_BASE_URL}/auth/login`, {
        headers: {
          'Origin': 'http://localhost:5173',
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'Content-Type'
        }
      });
      
      console.log('‚úÖ CORS preflight th√†nh c√¥ng');
      console.log('CORS Headers:', {
        'Access-Control-Allow-Origin': corsResponse.headers['access-control-allow-origin'],
        'Access-Control-Allow-Methods': corsResponse.headers['access-control-allow-methods'],
        'Access-Control-Allow-Headers': corsResponse.headers['access-control-allow-headers']
      });
      
    } catch (error) {
      console.log('‚ùå CORS preflight th·∫•t b·∫°i');
      console.log('Error:', error.message);
      console.log('üí° Ki·ªÉm tra c·∫•u h√¨nh CORS trong Spring Boot');
    }

  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh:', error);
  }
}

// Ch·∫°y debug
debugLogin().catch(console.error);
