package com.catshop.catshop.security;

import com.catshop.catshop.exception.JwtValidationException;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;

@Component
public class JwtUtils {

    // ‚úÖ key ‚â• 32 k√Ω t·ª± (n√™n ƒë·ªÉ trong application.properties)
    private final String jwtSecret = "mySuperUltraMegaSecretKey1234567890SuperLongSecretKey!!!";

    // Access Token: 15 ph√∫t, Refresh Token: 7 ng√†y
    private final long accessTokenExpirationMs = 15 * 60 * 1000; // 15 ph√∫t
    private final long refreshTokenExpirationMs = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y

    private Key getSigningKey() {
        return Keys.hmacShaKeyFor(jwtSecret.getBytes());
    }

    // ----------------------------------------------------
    // üîπ Tr√≠ch xu·∫•t to√†n b·ªô Claims
    // ----------------------------------------------------
    private Claims getAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // ----------------------------------------------------
    // üîπ Sinh Access Token (ng·∫Øn h·∫°n)
    // ----------------------------------------------------
    public String generateAccessToken(String email, String roleName) {
        return Jwts.builder()
                .setSubject(email)
                .claim("role", roleName)
                .setIssuer("CatShop Admin")
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + accessTokenExpirationMs))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // ----------------------------------------------------
    // üîπ Sinh Refresh Token (d√†i h·∫°n)
    // ----------------------------------------------------
    public String generateRefreshToken(String email) {
        return Jwts.builder()
                .setSubject(email)
                .setIssuer("CatShop Admin")
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + refreshTokenExpirationMs))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // ----------------------------------------------------
    // üîπ L·∫•y th√¥ng tin c∆° b·∫£n
    // ----------------------------------------------------
    public String getEmailFromToken(String token) {
        Claims claims = getAllClaims(token);
        return claims.getSubject();
    }

    public String extractRole(String token) {
        Claims claims = getAllClaims(token);
        // k·∫ø th·ª´a t·ª´ Map<String,Object>
//       Claims l√† m·ªôt Map (b·∫£n ƒë·ªì key‚Äìvalue).
//       M·ªói key l√† t√™n claim, m·ªói value l√† d·ªØ li·ªáu c·ªßa claim.
        Object roleObject = claims.get("role");  // l·∫•y ra ƒë·ªëi t∆∞·ª£ng role
        if (roleObject != null) {
            return roleObject.toString(); // chuy·ªÉn sang String an to√†n
        }
        return null; // n·∫øu kh√¥ng c√≥ th√¨ tr·∫£ v·ªÅ null
    }


    // L·∫•y ng√†y h·∫øt h·∫°n token
    public Date getExpirationDate(String token) {
        Claims claims = getAllClaims(token);
        return claims.getExpiration();
    }

    // ----------------------------------------------------
    // üîπ Validate token
    // ----------------------------------------------------
    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                    .setSigningKey(getSigningKey())
                    .build()
                    .parseClaimsJws(token);
            return true;
        } catch (ExpiredJwtException e) {
            throw new JwtValidationException("Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        } catch (UnsupportedJwtException e) {
            throw new JwtValidationException("Token kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!");
        } catch (MalformedJwtException e) {
            throw new JwtValidationException("Token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!");
        } catch (SignatureException e) {
            throw new JwtValidationException("Ch·ªØ k√Ω token kh√¥ng h·ª£p l·ªá!");
        } catch (IllegalArgumentException e) {
            throw new JwtValidationException("Token tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá!");
        }
    }


    // ----------------------------------------------------
    // üîπ Check h·∫øt h·∫°n m√† kh√¥ng n√©m l·ªói (d√πng trong /refresh)
    // ----------------------------------------------------
    public boolean isTokenExpired(String token) {
        try {
            Date expirationDate = getExpirationDate(token);
            return expirationDate.before(new Date());
        } catch (JwtException e) {
            return true; // token sai => coi nh∆∞ h·∫øt h·∫°n
        }
    }

    // ----------------------------------------------------
    // üîπ L·∫•y th·ªùi gian c√≤n l·∫°i c·ªßa token (ms)
    // ----------------------------------------------------
    public long getRemainingTime(String token) {
        long now = System.currentTimeMillis();
        Date expirationDate = getExpirationDate(token);
        long exp = expirationDate.getTime();
        return Math.max(exp - now, 0);
    }
}
